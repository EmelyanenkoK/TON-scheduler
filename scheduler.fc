(slice, (slice)) ~load_addr_slice (slice) asm "LDMSGADDR";
(int) equal_slices (slice, slice) asm "SDEQ";
(slice) get_address () asm "MYADDR";
(slice, int, int) udict_get_min(cell dict, int key_len) asm "DICTUMIN" "NULLSWAPIFNOT" "NULLSWAPIFNOT";
(cell, ()) ~udict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) "DICTUSET";

(cell, int) udict_get_ref?(cell dict, int key_len, int index) asm(index dict key_len) "DICTUGETREF" "NULLSWAPIFNOT";
(cell, int, cell, int) udict_delete_get_min_ref?(cell dict, int key_len) asm(-> 0 2 1 3) "DICTUREMMINREF" "NULLSWAPIFNOT" "NULLSWAPIFNOT";
(cell, (cell, int, int)) ~udict_delete_get_min_ref?(cell dict, int key_len) asm "DICTUREMMINREF" "NULLSWAPIFNOT" "NULLSWAPIFNOT";



(cell) generate_autobounce_message (int amount) inline {
  return begin_cell()
         .store_uint(28, 6) ;; identificator=0, instantHypercubeRouting=1, bounce=1, bounce=1, null_addr=00
         .store_uint(1024, 11) ;; addr_std$10 anycast:(Maybe Anycast) workchain_id:int8
         .store_uint(0, 256)
         .store_grams(amount)
         .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; othercurr, fees, created_lt, created_at
        .end_cell();
}

cell set_amount(slice order_message, int nanograms, cell other_currencies) inline {
  int flags = order_message~load_uint(4);
  (slice s_addr, slice d_addr, int old_grams, cell old_curr) = 
  ( order_message~load_msg_addr(), order_message~load_msg_addr(), order_message~load_grams(), order_message~load_dict());
  return begin_cell()
         .store_int(flags << 2, 6) ;; + null_addr
         .store_slice(d_addr)
         .store_grams(nanograms)
         .store_dict(other_currencies)
         .store_slice(order_message)
        .end_cell();
}

;; schedule table is table where indexes are (time<<32 + some_32int)
cell add_scheduled_order (cell schedule_table, int schedule_time, cell message) inline {
  int schedule_index = schedule_time << 32;
  ifnot(schedule_table.dict_empty?()) {
    do {
      schedule_index += 1;
      (cell value, int found) = schedule_table.udict_get_ref?(64, schedule_index);
    } until ( ~ found );
  }
  schedule_table~udict_set_ref(64, schedule_index, message);
  return schedule_table;
}

() schedule_message(cell order_message, int schedule_time) impure {
  slice storage_data = begin_parse(get_data());
  slice unused_data = storage_data~load_bits(8 + 32 + 256 + 16); 
  int next_call_time = min(storage_data~load_uint(32), schedule_time);
  cell schedule_table = storage_data~load_dict();
  schedule_table = add_scheduled_order(schedule_table, schedule_time, order_message);
  set_data(begin_cell()
                       .store_slice(unused_data)
                       .store_uint(next_call_time, 32)
                       .store_dict(schedule_table)
                       ;; .store_slice(storage_data) ;; should be empty for now
          .end_cell());
}

() do_stuff () impure {
  slice storage_data = begin_parse(get_data());
  int status = (storage_data~load_uint(8));
  if(status == 2) {
    slice unused_data = storage_data~load_bits(32 + 256 + 16);
    int next_call_time = storage_data~load_uint(32);
    int t = now();
    if (t > next_call_time) {
      cell schedule_table = storage_data~load_dict();
      int i = 0;
      do {
        var (schedule_table', i, order, f) = schedule_table.udict_delete_get_min_ref?(64);
        f~touch();
        if (f) {
           f = (i < t);
        }
        if (f) {
           schedule_table = schedule_table';           
           send_raw_message(order, 3);
        }        
      } until (~ f);
      (cell _unu, int _next_t, int f?) = schedule_table~udict_delete_get_min_ref?(64);
      if (f?) {
        next_call_time = _next_t;
      }
      set_data(begin_cell()
                       .store_uint(status + ( ~ f? ), 8)
                       .store_slice(unused_data)
                       .store_uint(next_call_time, 32)
                       .store_dict(schedule_table)
                       ;; .store_slice(storage_data) ;; should be empty for now
          .end_cell());
    }
  }  
}

() recv_internal (int msg_value, cell in_msg_cell, slice in_msg) {
  var cs = in_msg_cell.begin_parse();
  var flags = cs~load_uint(4);  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
  (var s_addr, int addr_h) = (cs~load_bits(11), cs~load_uint(256));
  ifnot(addr_h) { ;; prevent starting new loops from 'not ours' contracts
      do_stuff();
      return send_raw_message( generate_autobounce_message(33554431), 3 );
  } else {
    ;; it is scheduled order
    slice our_address  = cs~load_msg_addr();
    int nanograms = cs~load_grams();
    cell other_currencies = cs~load_dict();    
    int schedule_time = cs~load_uint(32);
    slice order_message = cs~load_ref().begin_parse();
    cell order_message_cell = set_amount(order_message, max(nanograms - 100000000, 1), other_currencies);
    return schedule_message(order_message_cell, schedule_time);
  }
}

() recv_external (slice in_msg) {
  slice storage_data = begin_parse(get_data());
  int status = (storage_data~load_uint(8));
  ifnot(status) { ;; Init
    set_data(begin_cell().store_uint(1, 8).store_slice(storage_data).end_cell());
    accept_message();
    send_raw_message( generate_autobounce_message(33554431), 3);
    return ();
  }
  var signature = in_msg~load_bits(512);
  var cs = in_msg;
  int msg_seqno = cs~load_uint(32);
  int stored_seqno = storage_data~load_uint(32);
  throw_unless(33, msg_seqno == stored_seqno);
  var public_key = storage_data~load_uint(256);
  throw_unless(34, check_signature(slice_hash(in_msg), signature, public_key));
  int operation = cs~load_uint(1);
  if (operation == 0) {
    send_raw_message( generate_autobounce_message(33554431), 3);
  }
}
